#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Definisi Struct untuk karakter
typedef struct {
    char name[50];
    int energy;
    int loves;
    char type[10];  // Menyimpan jenis pet (Cat atau Rabbit)
} Character;

// Maksimum jumlah karakter untuk pegawai dan pet
#define MAX_CHARACTERS 10

// Daftar karakter
Character humans[MAX_CHARACTERS];
Character pets[MAX_CHARACTERS];
int human_count = 0, pet_count = 0;

// Fungsi untuk mencari karakter berdasarkan nama
Character* find_character_by_name(char name[], char type) {
    Character* characters;
    int count;

    if (type == 'H') {  
        characters = humans;
        count = human_count;
    } else if (type == 'P') {  // 'P' untuk Pet
        characters = pets;
        count = pet_count;
    } else {
        return NULL;
    }

    for (int i = 0; i < count; i++) {
        if (strcmp(characters[i].name, name) == 0) {
            return &characters[i];
        }
    }
    return NULL;
}

// Fungsi untuk menambah karakter manusia
void add_human(char name[], int energy, int loves) {
    strcpy(humans[human_count].name, name);
    humans[human_count].energy = energy;
    humans[human_count].loves = loves;
    human_count++;
}

// Fungsi untuk menambah pet (baik Cat atau Rabbit)
void add_pet(char name[], int energy, int loves, char type[]) {
    strcpy(pets[pet_count].name, name);
    pets[pet_count].energy = energy;
    pets[pet_count].loves = loves;
    strcpy(pets[pet_count].type, type);
    pet_count++;
}

// Fungsi untuk menjalankan perintah "PETTING" (menambah loves pada pet)
void petting(char name[]) {
    Character* pet = find_character_by_name(name, 'P');
    if (pet != NULL) {
        pet->loves += 10;
        printf("You are gaining the %s’s loves\n", pet->type);
    } else {
        printf("Pet not found!\n");
    }
}

// Fungsi untuk menjalankan perintah "ATTR" (menampilkan atribut karakter)
void show_attributes(char name[], char type) {
    Character* character = find_character_by_name(name, type);
    if (character != NULL) {
        printf("%s’s Energy is %d\n", character->name, character->energy);
        printf("%s’s Loves is %d\n", character->name, character->loves);
    } else {
        printf("Character not found!\n");
    }
}

// Fungsi untuk menampilkan karakter pet berdasarkan jenis dan atribut "Loves" terurut
void show_sorted_by_loves(char pet_type[]) {
    // Sorting karakter pet berdasarkan loves (untuk jenis pet yang diberikan)
    Character temp;
    for (int i = 0; i < pet_count - 1; i++) {
        for (int j = i + 1; j < pet_count; j++) {
            if (strcmp(pets[i].type, pet_type) == 0 && strcmp(pets[j].type, pet_type) == 0 && pets[i].loves < pets[j].loves) {
                temp = pets[i];
                pets[i] = pets[j];
                pets[j] = temp;
            }
        }
    }

    // Menampilkan pet berdasarkan jenis yang diminta
    printf("Pets sorted by Loves (only %s):\n", pet_type);
    for (int i = 0; i < pet_count; i++) {
        if (strcmp(pets[i].type, pet_type) == 0) {
            printf("%s (%s): Loves = %d\n", pets[i].name, pets[i].type, pets[i].loves);
        }
    }
}

// Fungsi utama untuk menerima input perintah
void run_simulation() {
    char input[100];
    char command[50];
    char attr[50];
    char name[50];
    char pet_type[10];
    
    while (1) {
        printf("Enter command: ");
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = '\0';  // Menghapus newline di akhir input
        
        // Parsing perintah
        if (sscanf(input, "%s %s %s", command, pet_type, name) == 3) {
            if (strcmp(command, "PETTING") == 0) {
                petting(name);
            } else if (strcmp(command, "ATTR") == 0) {
                show_attributes(name, 'H');
            } else {
                printf("Invalid command!\n");
            }
        } else if (sscanf(input, "%s %s %s", command, pet_type, attr) == 2) {
            if (strcmp(command, "SHOW") == 0) {
                if (strcmp(pet_type, "CATS") == 0) {
                    if (strcmp(attr, "LOVES") == 0){
                    show_sorted_by_loves("Cat");}
                } else if (strcmp(pet_type, "RABBIT") == 0) {
                    show_sorted_by_loves("Rabbit");
                } else {
                    printf("Invalid pet type!\n");
                }
            } else {
                printf("Invalid command!\n");
            }
        } else {
            printf("Invalid input format!\n");
        }
    }
}

int main() {
    // Menambahkan karakter pegawai dan pet (Cat dan Rabbit)
    add_human("KIA", 60, 80);
    add_human("AISYAH", 70, 60);
    add_human("MOZA", 50, 100);

    add_pet("NOYA", 100, 50, "Cat");
    add_pet("COLA", 80, 30, "Cat");
    add_pet("FOX", 90, 70, "Rabbit");
    add_pet("FLUFF", 85, 40, "Rabbit");

    // Menjalankan simulasi
    run_simulation();

    return 0;
}
